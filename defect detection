{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNWAm7lMy7yec7cJhs7QZj6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ut277/Aries-project/blob/main/defect%20detection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install ase\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "etLzoFH5f-by",
        "outputId": "a91a8e68-05a5-45e5-8d59-062cfae2ca71"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ase\n",
            "  Downloading ase-3.23.0-py3-none-any.whl.metadata (3.8 kB)\n",
            "Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.10/dist-packages (from ase) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from ase) (1.13.1)\n",
            "Requirement already satisfied: matplotlib>=3.3.4 in /usr/local/lib/python3.10/dist-packages (from ase) (3.8.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (4.54.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (24.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (3.2.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3.4->ase) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib>=3.3.4->ase) (1.16.0)\n",
            "Downloading ase-3.23.0-py3-none-any.whl (2.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.9/2.9 MB\u001b[0m \u001b[31m15.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: ase\n",
            "Successfully installed ase-3.23.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ase import io\n",
        "import numpy as np\n",
        "\n",
        "# Load the nanotube structure from the exported .xyz file\n",
        "molecule = io.read('CNT_no_defect.xyz')\n",
        "\n",
        "# Define a function to introduce the Stone-Wales defect\n",
        "def stone_wales_defect(atoms, index1, index2, index3, index4):\n",
        "    # Get the positions of the atoms\n",
        "    coords = atoms.positions\n",
        "\n",
        "    # Find the center of mass of the selected atoms\n",
        "    center = np.mean(coords[[index1, index2, index3, index4]], axis=0)\n",
        "\n",
        "    # Define a 90-degree rotation matrix (around the Z-axis)\n",
        "    rotation_matrix = np.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])  # 90 degree rotation matrix\n",
        "\n",
        "    # Apply the rotation to the selected atoms (indices)\n",
        "    rotated_coords = np.dot(coords[[index1, index2, index3, index4]] - center, rotation_matrix.T) + center\n",
        "\n",
        "    # Update the positions of the atoms\n",
        "    atoms.positions[[index1, index2, index3, index4]] = rotated_coords\n",
        "\n",
        "# Example: Specify the indices of atoms forming the hexagonal ring\n",
        "# (You should find the actual indices of the atoms forming the hexagon in your nanotube)\n",
        "stone_wales_defect(molecule, index1=10, index2=11, index3=12, index4=13)\n",
        "\n",
        "# Save the modified molecule back to a file\n",
        "io.write('CNT_stone_wales.xyz', molecule)\n"
      ],
      "metadata": {
        "id": "5xfonwfdg-uX"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from ase import Atoms\n",
        "from ase.build import nanotube\n",
        "from ase.visualize import view\n",
        "\n",
        "# Create a basic (10, 10) CNT model\n",
        "cnt = nanotube(10, 10, length=5, bond=1.42)  # Length and bond settings can vary\n",
        "cnt.center(vacuum=5)  # Adds vacuum padding around CNT\n",
        "\n",
        "# Save pristine CNT\n",
        "cnt.write(\"CNT_pristine2.xyz\")\n",
        "\n",
        "# Introduce a single vacancy (remove one atom)\n",
        "cnt_single_vacancy = cnt.copy()\n",
        "cnt_single_vacancy.pop(0)  # Remove an atom to create a single vacancy\n",
        "cnt_single_vacancy.write(\"CNT_single_vacancy2.xyz\")\n",
        "\n",
        "# Introduce a double vacancy (remove two adjacent atoms)\n",
        "cnt_double_vacancy = cnt.copy()\n",
        "cnt_double_vacancy.pop(0)  # Remove one atom\n",
        "cnt_double_vacancy.pop(1)  # Remove another adjacent atom\n",
        "cnt_double_vacancy.write(\"CNT_double_vacancy2.xyz\")\n",
        "\n",
        "# Stone-Wales defect (rearrange a bond in the structure)\n",
        "cnt_stone_wales = cnt.copy()\n",
        "cnt_stone_wales[-1].position += [0.5, 0, 0]  # Slightly displace an atom\n",
        "cnt_stone_wales.write(\"CNT_stone_wales2.xyz\")\n",
        "\n",
        "# Visualize structures if desired\n",
        "#view(cnt)  # Uncomment to view the structure\n"
      ],
      "metadata": {
        "id": "YN04Y9qWnCL1"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ffc6qnCCSwb8",
        "outputId": "ee6b136c-276c-4022-f89e-f97f67c3c875"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generated parameter settings for simulation:\n",
            "Defocus: -10 nm, Cs3: 0.7 mm, Aperture: 10 mrad\n",
            "Defocus: -10 nm, Cs3: 0.7 mm, Aperture: 20 mrad\n",
            "Defocus: -10 nm, Cs3: 0.7 mm, Aperture: 30 mrad\n",
            "Defocus: -10 nm, Cs3: 1.0 mm, Aperture: 10 mrad\n",
            "Defocus: -10 nm, Cs3: 1.0 mm, Aperture: 20 mrad\n",
            "Defocus: -10 nm, Cs3: 1.0 mm, Aperture: 30 mrad\n",
            "Defocus: -10 nm, Cs3: 1.3 mm, Aperture: 10 mrad\n",
            "Defocus: -10 nm, Cs3: 1.3 mm, Aperture: 20 mrad\n",
            "Defocus: -10 nm, Cs3: 1.3 mm, Aperture: 30 mrad\n",
            "Defocus: -5 nm, Cs3: 0.7 mm, Aperture: 10 mrad\n",
            "Defocus: -5 nm, Cs3: 0.7 mm, Aperture: 20 mrad\n",
            "Defocus: -5 nm, Cs3: 0.7 mm, Aperture: 30 mrad\n",
            "Defocus: -5 nm, Cs3: 1.0 mm, Aperture: 10 mrad\n",
            "Defocus: -5 nm, Cs3: 1.0 mm, Aperture: 20 mrad\n",
            "Defocus: -5 nm, Cs3: 1.0 mm, Aperture: 30 mrad\n",
            "Defocus: -5 nm, Cs3: 1.3 mm, Aperture: 10 mrad\n",
            "Defocus: -5 nm, Cs3: 1.3 mm, Aperture: 20 mrad\n",
            "Defocus: -5 nm, Cs3: 1.3 mm, Aperture: 30 mrad\n",
            "Defocus: 0 nm, Cs3: 0.7 mm, Aperture: 10 mrad\n",
            "Defocus: 0 nm, Cs3: 0.7 mm, Aperture: 20 mrad\n",
            "Defocus: 0 nm, Cs3: 0.7 mm, Aperture: 30 mrad\n",
            "Defocus: 0 nm, Cs3: 1.0 mm, Aperture: 10 mrad\n",
            "Defocus: 0 nm, Cs3: 1.0 mm, Aperture: 20 mrad\n",
            "Defocus: 0 nm, Cs3: 1.0 mm, Aperture: 30 mrad\n",
            "Defocus: 0 nm, Cs3: 1.3 mm, Aperture: 10 mrad\n",
            "Defocus: 0 nm, Cs3: 1.3 mm, Aperture: 20 mrad\n",
            "Defocus: 0 nm, Cs3: 1.3 mm, Aperture: 30 mrad\n",
            "Defocus: 5 nm, Cs3: 0.7 mm, Aperture: 10 mrad\n",
            "Defocus: 5 nm, Cs3: 0.7 mm, Aperture: 20 mrad\n",
            "Defocus: 5 nm, Cs3: 0.7 mm, Aperture: 30 mrad\n",
            "Defocus: 5 nm, Cs3: 1.0 mm, Aperture: 10 mrad\n",
            "Defocus: 5 nm, Cs3: 1.0 mm, Aperture: 20 mrad\n",
            "Defocus: 5 nm, Cs3: 1.0 mm, Aperture: 30 mrad\n",
            "Defocus: 5 nm, Cs3: 1.3 mm, Aperture: 10 mrad\n",
            "Defocus: 5 nm, Cs3: 1.3 mm, Aperture: 20 mrad\n",
            "Defocus: 5 nm, Cs3: 1.3 mm, Aperture: 30 mrad\n",
            "Defocus: 10 nm, Cs3: 0.7 mm, Aperture: 10 mrad\n",
            "Defocus: 10 nm, Cs3: 0.7 mm, Aperture: 20 mrad\n",
            "Defocus: 10 nm, Cs3: 0.7 mm, Aperture: 30 mrad\n",
            "Defocus: 10 nm, Cs3: 1.0 mm, Aperture: 10 mrad\n",
            "Defocus: 10 nm, Cs3: 1.0 mm, Aperture: 20 mrad\n",
            "Defocus: 10 nm, Cs3: 1.0 mm, Aperture: 30 mrad\n",
            "Defocus: 10 nm, Cs3: 1.3 mm, Aperture: 10 mrad\n",
            "Defocus: 10 nm, Cs3: 1.3 mm, Aperture: 20 mrad\n",
            "Defocus: 10 nm, Cs3: 1.3 mm, Aperture: 30 mrad\n"
          ]
        }
      ],
      "source": [
        "import itertools\n",
        "\n",
        "# Define parameter ranges\n",
        "defocus_range = [-10, -5, 0, 5, 10]  # in nm\n",
        "Cs3_range = [0.7, 1.0, 1.3]  # in mm\n",
        "aperture_range = [10, 20, 30]  # in mrad\n",
        "\n",
        "# Generate combinations of parameters\n",
        "parameter_combinations = list(itertools.product(defocus_range, Cs3_range, aperture_range))\n",
        "\n",
        "print(\"Generated parameter settings for simulation:\")\n",
        "for params in parameter_combinations:\n",
        "    print(f\"Defocus: {params[0]} nm, Cs3: {params[1]} mm, Aperture: {params[2]} mrad\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Define paths to CNT structure files and output directory\n",
        "cnt_files = [\"CNT_pristine_2.xyz\", \"CNT_single_vacancy2.xyz\", \"CNT_double_vacancy2.xyz\", \"CNT_stone_wales2.xyz\"]\n",
        "output_dir = \"dr_probe_outputs\"\n",
        "parameter_combinations = [(df, cs, ap) for df in defocus_range for cs in Cs3_range for ap in aperture_range]\n",
        "\n",
        "# Ensure the output directory exists\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Generate batch files with varied microscope parameters for each defect model\n",
        "def generate_batch_file(cnt_file, params, output_file):\n",
        "    defocus, Cs3, aperture = params\n",
        "    batch_content = f\"\"\"\n",
        "# Load the atomic structure file\n",
        "load atomic_structure {cnt_file}\n",
        "\n",
        "# Set microscope parameters\n",
        "set voltage 80.0           # Acceleration voltage in kV\n",
        "set defocus {defocus}      # Defocus in nm\n",
        "set Cs3 {Cs3}              # Spherical aberration in mm\n",
        "set aperture {aperture}    # Objective aperture in mrad\n",
        "\n",
        "# Configure image simulation parameters\n",
        "set pixel_size 0.5         # Pixel size in Å/pixel\n",
        "set slice_thickness 0.5    # Thickness for multislice calculations in Å\n",
        "\n",
        "# Output settings\n",
        "set output_image {output_dir}/{os.path.splitext(cnt_file)[0]}_def{defocus}_Cs{Cs3}_ap{aperture}.tif\n",
        "run simulate_image\n",
        "    \"\"\"\n",
        "    with open(output_file, \"w\") as f:\n",
        "        f.write(batch_content)\n",
        "\n",
        "# Generate batch files\n",
        "for cnt_file in cnt_files:\n",
        "    for params in parameter_combinations:\n",
        "        param_str = f\"def{params[0]}_Cs{params[1]}_ap{params[2]}\"\n",
        "        output_file = f\"{output_dir}/{os.path.splitext(cnt_file)[0]}_{param_str}.batch\"\n",
        "        generate_batch_file(cnt_file, params, output_file)\n",
        "\n",
        "print(\"Batch files created for each defect type with varying parameters.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bSDAVbpNxbcW",
        "outputId": "62574ef3-da48-4e4a-9695-bf0e5b41f77d"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Batch files created for each defect type with varying parameters.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mXKHfLVFQ4wq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using the initial models (CNT_no_defect, CNT_single_vacancy, CNT_double_vacancy, CNT_stone_wales), you can create batch files with each unique parameter combination."
      ],
      "metadata": {
        "id": "_b2l6Sm9TO1K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2\n",
        "import numpy as np\n",
        "import os\n",
        "from glob import glob\n",
        "\n",
        "# Directory where the original 180 images are stored\n",
        "input_dir = \"dr_probe_outputs\"\n",
        "# Directory where the augmented images will be saved\n",
        "output_dir = \"augmented_images\"\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Load all images in the input directory\n",
        "image_paths = glob(os.path.join(input_dir, \"*.batch\"))\n",
        "print(\"Found image paths:\", image_paths)  # Debug: Print found paths\n",
        "\n",
        "def augment_image(image):\n",
        "    \"\"\"\n",
        "    Applies three unique augmentation transformations to an image.\n",
        "    Returns a list of augmented images.\n",
        "    \"\"\"\n",
        "    augmented_images = []\n",
        "\n",
        "    # Augmentation 1: Rotation and Brightness Adjustment\n",
        "    image1 = cv2.rotate(image, cv2.ROTATE_90_CLOCKWISE)  # Rotate 90 degrees\n",
        "    alpha = 1.2  # Contrast control (1.0-3.0)\n",
        "    beta = 20    # Brightness control (0-100)\n",
        "    image1 = cv2.convertScaleAbs(image1, alpha=alpha, beta=beta)\n",
        "    augmented_images.append(image1)\n",
        "     # Augmentation 2: Horizontal Flip and Gaussian Noise\n",
        "    image2 = cv2.flip(image, 1)  # Flip horizontally\n",
        "    noise = np.random.normal(0, 10, image2.shape).astype(np.uint8)\n",
        "    image2 = np.clip(image2.astype(np.int16) + noise.astype(np.int16), 0, 255).astype(np.uint8)  # Prevent overflow\n",
        "    augmented_images.append(image2)\n",
        "\n",
        "    # Augmentation 3: Small Rotation and Brightness Reduction\n",
        "    rows, cols = image.shape\n",
        "    M = cv2.getRotationMatrix2D((cols / 2, rows / 2), 15, 1)  # Rotate by 15 degrees\n",
        "    image3 = cv2.warpAffine(image, M, (cols, rows))\n",
        "    alpha = 0.8  # Lower contrast\n",
        "    beta = -10   # Slightly reduce brightness\n",
        "    image3 = cv2.convertScaleAbs(image3, alpha=alpha, beta=beta)\n",
        "    augmented_images.append(image3)\n",
        "\n",
        "    return augmented_images\n",
        "\n",
        "# Apply augmentation to each image and save results\n",
        "for image_path in image_paths:\n",
        "    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n",
        "    if image is None:\n",
        "        print(f\"Warning: Failed to load image {image_path}\")  # Error check\n",
        "        continue\n",
        "\n",
        "    # Generate augmented versions\n",
        "    augmented_images = augment_image(image)\n",
        "\n",
        "    # Save each augmented image with a unique name\n",
        "    base_name = os.path.splitext(os.path.basename(image_path))[0]\n",
        "    for i, aug_image in enumerate(augmented_images):\n",
        "        aug_image_path = os.path.join(output_dir, f\"{base_name}_aug_{i+1}.tif\")\n",
        "        if not cv2.imwrite(aug_image_path, aug_image):\n",
        "            print(f\"Error: Failed to save image {aug_image_path}\")  # Error check\n",
        "            print(\"Augmentation complete. 540 images saved in:\", output_dir)"
      ],
      "metadata": {
        "id": "sBEJIFFORQIH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "import cv2\n",
        "import os\n",
        "from glob import glob\n",
        "\n",
        "# Define paths to image data\n",
        "data_dir = \"augmented_images\"  # Path where images are saved\n",
        "\n",
        "# Labels for defect types\n",
        "defect_types = {\n",
        "    \"CNT_no_defect\": 0,\n",
        "    \"CNT_single_vacancy\": 1,\n",
        "    \"CNT_double_vacancy\": 2,\n",
        "    \"CNT_stone_wales\": 3\n",
        "}\n",
        "\n",
        "# Image dimensions\n",
        "img_height, img_width = 64, 64\n",
        "\n",
        "# Load images and labels\n",
        "def load_images(data_dir, defect_types, img_height, img_width):\n",
        "    images = []\n",
        "    labels = []\n",
        "    for defect_name, label in defect_types.items():\n",
        "        # Find images for each defect type\n",
        "        image_paths = glob(os.path.join(data_dir, f\"{defect_name}*.tif\"))\n",
        "        for image_path in image_paths:\n",
        "            # Read and preprocess the image\n",
        "            image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n",
        "            image = cv2.resize(image, (img_height, img_width))\n",
        "            images.append(image)\n",
        "            labels.append(label)\n",
        "    return np.array(images), np.array(labels)\n",
        "\n",
        "# Load dataset\n",
        "images, labels = load_images(data_dir, defect_types, img_height, img_width)\n",
        "\n",
        "# Reshape for model input\n",
        "images = images.reshape(-1, img_height, img_width, 1).astype('float32') / 255.0\n",
        "\n",
        "# Split dataset into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)\n",
        "\n",
        "# Data augmentation\n",
        "datagen = ImageDataGenerator(\n",
        "    rotation_range=15,\n",
        "    width_shift_range=0.1,\n",
        "    height_shift_range=0.1,\n",
        "    brightness_range=[0.8, 1.2],\n",
        "    horizontal_flip=True,\n",
        "    fill_mode='nearest'\n",
        ")\n",
        "datagen.fit(X_train)\n",
        "\n",
        "# Define CNN model\n",
        "def create_cnn_model(input_shape, num_classes):\n",
        "    model = models.Sequential([\n",
        "        layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),\n",
        "        layers.MaxPooling2D((2, 2)),\n",
        "        layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "        layers.MaxPooling2D((2, 2)),\n",
        "        layers.Conv2D(128, (3, 3), activation='relu'),\n",
        "        layers.MaxPooling2D((2, 2)),\n",
        "        layers.Flatten(),\n",
        "        layers.Dense(64, activation='relu'),\n",
        "        layers.Dense(num_classes, activation='softmax')\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "input_shape = (img_height, img_width, 1)\n",
        "num_classes = len(defect_types)\n",
        "model = create_cnn_model(input_shape, num_classes)\n",
        "\n",
        "# Train the model\n",
        "batch_size = 16\n",
        "epochs = 20\n",
        "\n",
        "history = model.fit(\n",
        "    datagen.flow(X_train, y_train, batch_size=batch_size),\n",
        "    validation_data=(X_test, y_test),\n",
        "    epochs=epochs\n",
        ")\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=2)\n",
        "print(f\"Test accuracy: {test_accuracy:.4f}\")\n",
        "\n",
        "# Generate classification report\n",
        "y_pred = np.argmax(model.predict(X_test), axis=1)\n",
        "print(classification_report(y_test, y_pred, target_names=defect_types.keys()))"
      ],
      "metadata": {
        "id": "KamV0IZVR5Fj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}